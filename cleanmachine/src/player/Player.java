package player;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import player.music.Playlist;
import player.music.Song;
import player.music.SongDefinition;

import javax.management.RuntimeErrorException;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.*;
import java.util.stream.Collectors;

public class Player implements Constants {

    private Song currentSong;
    private Playlist mainPlaylist;
    private Queue<SongDefinition> songQueue;
    private final List<Playlist> playlists;
    private Playlist currentPlaylist;
    private boolean loop;


    public Player( final Playlist currentPlaylist, final List<Playlist> playlists) {
        this.playlists = playlists;
        this.currentPlaylist = currentPlaylist;
        this.mainPlaylist = currentPlaylist;

    }

    public List<Playlist> getPlaylists() {
        return playlists;
    }

    public Playlist getCurrentPlayerlist() {
        return currentPlaylist;
    }

    public void init() {
        for(SongDefinition definition : currentPlaylist.getSongDefinitionList()) {
            songQueue.add(definition);
        }
    }

    public boolean next() {
        if(currentSong != null)
            currentSong.stop();
        final SongDefinition definition = songQueue.poll();
        if(definition == null) {
            return false;
        }
        final Song song = new Song(definition);
        song.start();
        //song.getMediaPlayer().setOnEndOfMedia(this::next);
        if(loop) {
            songQueue.add(currentSong.getDefinition());
        }
        currentSong = song;
        return true;
    }

    public void pause() {
        currentSong.pause();
    }

    public Song getCurrentSong() {
        return currentSong;
    }

    public void shuffle() {
        songQueue.clear();
        final List<SongDefinition> list = new LinkedList<>(currentPlaylist.getSongDefinitionList());
        Collections.shuffle(list);

        for(SongDefinition def : list) {
            songQueue.add(def);
        }
    }

    public void clickLoop() {
        loop = !loop;
    }

    public boolean isLooping() {
        return loop;
    }

    public void addNewSong(final File[] files) {
        for(File f : files) {
            final SongDefinition definition = new SongDefinition(f.getAbsolutePath());
            mainPlaylist.getSongDefinitionList().add(definition);
            if (mainPlaylist.equals(currentPlaylist)) {
                songQueue.add(definition);
            }
        }

        save();
    }

    public void addSongToPlaylist(Playlist playlist, SongDefinition definition) {
        playlist.getSongDefinitionList().add(definition);
        save();
    }

    public void switchToPlaylist(Playlist playlist) {
        songQueue.clear();

        for(SongDefinition definition : playlist.getSongDefinitionList()) {
            songQueue.add(definition);
        }
        currentPlaylist = playlist;
    }




    private void save() {
        final JSONObject toSave = getSaveObject();
        BufferedWriter writer = null;
        final File file = new File(CONFIG_FILE_PATH);
        try {
            if(!file.exists())
                file.createNewFile();
            writer = new BufferedWriter(new FileWriter(file));
            writer.write(toSave.toJSONString());
            writer.close();
        } catch(IOException e) {
            e.printStackTrace();
        }
    }
    private JSONObject getSaveObject() {
        JSONObject object = new JSONObject();
        JSONArray song_array = new JSONArray();
        for(SongDefinition definition : mainPlaylist.getSongDefinitionList()) {
            song_array.add(definition.getLocation());
        }
        object.put(SONG_LIBRARY, song_array);

        JSONArray playlists_array = new JSONArray();
        for(Playlist playlist : playlists) {
            if(playlist.equals(mainPlaylist)) //we don't want to save main playlist, as it is generated by song_library
                continue;
            JSONObject playlist_obj = new JSONObject();
            playlist_obj.put("name",playlist.getName());
            JSONArray song_files = new JSONArray();
            for(SongDefinition definition : playlist.getSongDefinitionList()) {
                song_files.add(definition);
            }

            playlist_obj.put("songfiles", song_files);
        }

        return object;

    }


}